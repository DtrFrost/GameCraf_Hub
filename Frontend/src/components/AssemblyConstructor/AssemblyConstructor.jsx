import React, { useState, useEffect } from 'react';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import axios from 'axios';
import Item from './Item';
import ItemSlot from './ItemSlot';
import './AssemblyConstructor.css';

axios.defaults.baseURL = 'http://localhost:3005';

const AssemblyConstructor = () => {
    const [selectedGame, setSelectedGame] = useState('');
    const [selectedCharacter, setSelectedCharacter] = useState(null);
    const [characters, setCharacters] = useState([]);
    const [items, setItems] = useState([]);
    const [characterStats, setCharacterStats] = useState({ damage: 0, defense: 0, health: 125 });
    const [itemSlots, setItemSlots] = useState([null, null, null, null]);
    const [buildTitle, setBuildTitle] = useState('');
    const [buildDescription, setBuildDescription] = useState('');
    const [loading, setLoading] = useState(false);

    // –°–ø–∏—Å–æ–∫ –∏–≥—Ä —Å –∏–∫–æ–Ω–∫–∞–º–∏
    const gamesList = [
        { 
            name: 'Team Fortress 2', 
            icon: './Frontend/public/gameIcons/tf2-icon.svg',
            id: 'tf2'
        },
        { 
            name: 'Minecraft', 
            icon: './Frontend/public/gameIcons/minecraft-icon.png',
            id: 'minecraft'
        },
        { 
            name: 'The binding of Isaac', 
            icon: './Frontend/public/gameIcons/tboi-icon.webp',
            id: 'isaac'
        }
    ];

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–≥—Ä—ã
    useEffect(() => {
        if (selectedGame) {
            fetchCharacters(selectedGame);
            fetchItems(selectedGame);
        }
    }, [selectedGame]);

    // –í —Ñ—É–Ω–∫—Ü–∏–∏ fetchCharacters –∏ fetchItems –¥–æ–±–∞–≤—å—Ç–µ –æ—Ç–ª–∞–¥–∫—É:
const fetchCharacters = async (gameName) => {
  try {
    setLoading(true);
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∏–≥—Ä—ã:', gameName);
    
    const response = await axios.get(`/api/builds/characters/${gameName}`);
    
    console.log('üìä –û—Ç–≤–µ—Ç –æ—Ç API (–ø–µ—Ä—Å–æ–Ω–∞–∂–∏):', response.data);
    
    if (Array.isArray(response.data)) {
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
      const charactersWithFixedPaths = response.data.map(character => ({
        ...character,
        character_image: character.character_image || '/characters/placeholder.png'
      }));
      
      setCharacters(charactersWithFixedPaths);
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', charactersWithFixedPaths.length);
    } else {
      console.error('‚ùå –û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏:', response.data);
      setCharacters([]);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', error);
    setCharacters([]);
  } finally {
    setLoading(false);
  }
};

const fetchItems = async (gameName) => {
  try {
    setLoading(true);
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∏–≥—Ä—ã:', gameName);
    
    const response = await axios.get(`/api/builds/items/${gameName}`);
    
    console.log('üìä –û—Ç–≤–µ—Ç –æ—Ç API (–ø—Ä–µ–¥–º–µ—Ç—ã):', response.data);
    
    if (Array.isArray(response.data)) {
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      const itemsWithFixedPaths = response.data.map(item => ({
        ...item,
        item_image: item.item_image || '/items/placeholder.png'
      }));
      
      setItems(itemsWithFixedPaths);
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', itemsWithFixedPaths.length);
    } else {
      console.error('‚ùå –û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏:', response.data);
      setItems([]);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', error);
    setItems([]);
  } finally {
    setLoading(false);
  }
};

    const handleGameSelect = (gameName) => {
        setSelectedGame(gameName);
        setSelectedCharacter(null);
        setCharacters([]);
        setItems([]);
        setItemSlots([null, null, null, null]);
        setCharacterStats({ damage: 0, defense: 0, health: 125 });
    };

    const handleCharacterSelect = (character) => {
        setSelectedCharacter(character);
        setCharacterStats({
            damage: character.base_damage || 0,
            defense: character.base_defense || 0,
            health: character.base_health || 125
        });
        setItemSlots([null, null, null, null]);
    };

    const handleDrop = (item, index) => {
        if (itemSlots[index]) return;

        setCharacterStats(prev => ({
            damage: prev.damage + (item.damage_bonus || 0),
            defense: prev.defense + (item.defense_bonus || 0),
            health: prev.health + (item.health_bonus || 0),
        }));

        setItemSlots(prev => {
            const newSlots = [...prev];
            newSlots[index] = item;
            return newSlots;
        });
    };

    const handleRemove = (index) => {
        const itemToRemove = itemSlots[index];
        if (!itemToRemove) return;

        setCharacterStats(prev => ({
            damage: prev.damage - (itemToRemove.damage_bonus || 0),
            defense: prev.defense - (itemToRemove.defense_bonus || 0),
            health: prev.health - (itemToRemove.health_bonus || 0),
        }));

        setItemSlots(prev => {
            const newSlots = [...prev];
            newSlots[index] = null;
            return newSlots;
        });
    };

    const saveBuild = async () => {
    try {
        const token = localStorage.getItem('token');
        if (!token) {
            alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
            return;
        }

        if (!buildTitle.trim()) {
            alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏');
            return;
        }

        if (!selectedCharacter) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
            return;
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º null —Å–ª–æ—Ç—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const itemsData = itemSlots
            .filter(slot => slot !== null)
            .map(slot => ({ 
                id: slot.id,
                item_name: slot.item_name,
                item_image: slot.item_image,
                damage_bonus: slot.damage_bonus,
                defense_bonus: slot.defense_bonus,
                health_bonus: slot.health_bonus
            }));

        const buildData = {
            title: buildTitle,
            gameName: selectedGame,
            characterName: selectedCharacter.character_name,
            items: itemsData,
            description: buildDescription,
            playstyle: 'custom' // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è –∏–≥—Ä—ã
        };

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–±–æ—Ä–∫–∏:', buildData);

        const response = await axios.post('/api/builds', buildData, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        });

        console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
        
        alert('–°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        setBuildTitle('');
        setBuildDescription('');
        setItemSlots([null, null, null, null]);
        setCharacterStats({ 
            damage: selectedCharacter.base_damage || 0, 
            defense: selectedCharacter.base_defense || 0, 
            health: selectedCharacter.base_health || 125 
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–±–æ—Ä–∫–∏:', error);
        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–±–æ—Ä–∫–∏: ' + (error.response?.data?.error || error.message));
    }
};

    return (
        <DndProvider backend={HTML5Backend}>
            <div className="assembly-constructor">
                <div className="constructor-header">
                    <h1>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–±–æ—Ä–æ–∫</h1>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–±–æ—Ä–∫—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</p>
                </div>

                <div className="constructor-layout">
                    {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤—ã–±–æ—Ä –∏–≥—Ä—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
                    <div className="selection-sidebar">
                        <div className="sidebar-section">
                            <h3>üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É</h3>
                            <div className="games-grid">
                                {gamesList.map((game) => (
                                    <div
                                        key={game.id}
                                        className={`game-card ${selectedGame === game.name ? 'selected' : ''}`}
                                        onClick={() => handleGameSelect(game.name)}
                                    >
                                        <div className="game-icon">
                                            <img 
                                                src={game.icon} 
                                                alt={game.name}
                                                onError={(e) => {
                                                    e.target.style.display = 'none';
                                                    e.target.nextSibling.style.display = 'block';
                                                }}
                                            />
                                            <span className="game-icon-fallback">üéÆ</span>
                                        </div>
                                        <div className="game-name">{game.name}</div>
                                    </div>
                                ))}
                            </div>
                        </div>

                        {selectedGame && (
                            <div className="sidebar-section">
                                <h3>üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h3>
                                
                                {loading ? (
                                    <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...</div>
                                ) : (
                                    <div className="characters-grid">
                                        {characters.map((character) => {
    console.log('üñºÔ∏è Character image path:', character.character_image); // ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ß–ö–£
    return (
        <div
            key={character.id}
            className={`character-card ${
                selectedCharacter?.id === character.id ? 'selected' : ''
            }`}
            onClick={() => handleCharacterSelect(character)}
        >
            <div className="character-image">
                <img 
                    src={character.character_image} 
                    alt={character.character_name}
                    onError={(e) => {
                        e.target.style.display = 'none';
                        e.target.nextSibling.style.display = 'block';
                    }}
                />
                <div className="character-image-fallback">üë§</div>
            </div>
            {/* ... */}
        </div>
    );
})}
                                    </div>
                                )}
                                
                                {!loading && characters.length === 0 && (
                                    <div className="no-characters">
                                        –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
                                    </div>
                                )}
                            </div>
                        )}
                    </div>

                    {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä */}
                    <div className="constructor-main">
                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±–æ—Ä–∫–µ */}
                        <div className="build-info-panel">
                            <div className="form-group">
                                <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ *</label>
                                <input
                                    type="text"
                                    className="title-input"
                                    placeholder="–ú–æ—è –º–æ—â–Ω–∞—è —Å–±–æ—Ä–∫–∞..."
                                    value={buildTitle}
                                    onChange={(e) => setBuildTitle(e.target.value)}
                                />
                            </div>

                            <div className="form-group">
                                <label>–û–ø–∏—Å–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏</label>
                                <textarea
                                    placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–±–æ—Ä–∫—É..."
                                    value={buildDescription}
                                    onChange={(e) => setBuildDescription(e.target.value)}
                                />
                            </div>
                        </div>

                        {/* –û–±–ª–∞—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —Å–ª–æ—Ç–æ–≤ */}
                        {selectedCharacter ? (
                            <div className="character-build-area">
                                <div className="character-display">
                                    <div className="character-header">
                                        <h2>{selectedCharacter.character_name}</h2>
                                        <div className="game-badge">{selectedGame}</div>
                                    </div>
                                    
                                    <div className="character-visual">
                                        <img 
                                            src={selectedCharacter.character_image} 
                                            alt={selectedCharacter.character_name}
                                            className="character-image"
                                            onError={(e) => {
                                                e.target.src = '/placeholder-character.jpg';
                                            }}
                                        />
                                    </div>

                                    <div className="character-stats">
                                        <div className="stat-card">
                                            <div className="stat-icon">‚öîÔ∏è</div>
                                            <div className="stat-info">
                                                <div className="stat-label">–£—Ä–æ–Ω</div>
                                                <div className="stat-value">{characterStats.damage}</div>
                                            </div>
                                        </div>
                                        <div className="stat-card">
                                            <div className="stat-icon">üõ°Ô∏è</div>
                                            <div className="stat-info">
                                                <div className="stat-label">–ó–∞—â–∏—Ç–∞</div>
                                                <div className="stat-value">{characterStats.defense}</div>
                                            </div>
                                        </div>
                                        <div className="stat-card">
                                            <div className="stat-icon">‚ù§Ô∏è</div>
                                            <div className="stat-info">
                                                <div className="stat-label">–ó–¥–æ—Ä–æ–≤—å–µ</div>
                                                <div className="stat-value">{characterStats.health}</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div className="slots-section">
                                    <h3>üéí –°–ª–æ—Ç—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤</h3>
                                    <div className="slots-grid">
                                        {itemSlots.map((item, index) => (
                                            <ItemSlot
                                                key={index}
                                                item={item}
                                                slotNumber={index + 1}
                                                onDrop={(droppedItem) => handleDrop(droppedItem, index)}
                                                onRemove={() => handleRemove(index)}
                                            />
                                        ))}
                                    </div>
                                </div>

                                <div className="items-section">
                                    <h3>üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã</h3>
                                    <div className="items-grid">
{items.map((item) => {
    console.log('üéí Item image path:', item.item_image); // ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ß–ö–£
    return (
        <Item key={item.id} item={item} />
    );
})}
                                    </div>
                                </div>

                                {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
                                <div className="actions-panel">
                                    <button 
                                        className="btn btn-primary"
                                        onClick={saveBuild}
                                        disabled={!buildTitle}
                                    >
                                        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–±–æ—Ä–∫—É
                                    </button>
                                </div>
                            </div>
                        ) : (
                            <div className="no-selection">
                                <div className="no-selection-content">
                                    <h3>üöÄ –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏</h3>
                                    <p>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏</p>
                                    <div className="no-selection-steps">
                                        <div className="step">
                                            <span className="step-number">1</span>
                                            <span className="step-text">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É</span>
                                        </div>
                                        <div className="step">
                                            <span className="step-number">2</span>
                                            <span className="step-text">–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</span>
                                        </div>
                                        <div className="step">
                                            <span className="step-number">3</span>
                                            <span className="step-text">–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã</span>
                                        </div>
                                        <div className="step">
                                            <span className="step-number">4</span>
                                            <span className="step-text">–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–±–æ—Ä–∫—É</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </DndProvider>
    );
};

export default AssemblyConstructor;